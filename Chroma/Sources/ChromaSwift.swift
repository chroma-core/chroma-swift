// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(chroma_swiftFFI)
import chroma_swiftFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_chroma_swift_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_chroma_swift_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureChromaSwiftInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public struct AdvancedGetResult {
    public var ids: [String]
    public var embeddings: [[Float]]?
    public var documents: [String?]?
    public var metadatas: [String?]?
    public var uris: [String?]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ids: [String], embeddings: [[Float]]?, documents: [String?]?, metadatas: [String?]?, uris: [String?]?) {
        self.ids = ids
        self.embeddings = embeddings
        self.documents = documents
        self.metadatas = metadatas
        self.uris = uris
    }
}

#if compiler(>=6)
extension AdvancedGetResult: Sendable {}
#endif


extension AdvancedGetResult: Equatable, Hashable {
    public static func ==(lhs: AdvancedGetResult, rhs: AdvancedGetResult) -> Bool {
        if lhs.ids != rhs.ids {
            return false
        }
        if lhs.embeddings != rhs.embeddings {
            return false
        }
        if lhs.documents != rhs.documents {
            return false
        }
        if lhs.metadatas != rhs.metadatas {
            return false
        }
        if lhs.uris != rhs.uris {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ids)
        hasher.combine(embeddings)
        hasher.combine(documents)
        hasher.combine(metadatas)
        hasher.combine(uris)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdvancedGetResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdvancedGetResult {
        return
            try AdvancedGetResult(
                ids: FfiConverterSequenceString.read(from: &buf),
                embeddings: FfiConverterOptionSequenceSequenceFloat.read(from: &buf),
                documents: FfiConverterOptionSequenceOptionString.read(from: &buf),
                metadatas: FfiConverterOptionSequenceOptionString.read(from: &buf),
                uris: FfiConverterOptionSequenceOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: AdvancedGetResult, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.ids, into: &buf)
        FfiConverterOptionSequenceSequenceFloat.write(value.embeddings, into: &buf)
        FfiConverterOptionSequenceOptionString.write(value.documents, into: &buf)
        FfiConverterOptionSequenceOptionString.write(value.metadatas, into: &buf)
        FfiConverterOptionSequenceOptionString.write(value.uris, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdvancedGetResult_lift(_ buf: RustBuffer) throws -> AdvancedGetResult {
    return try FfiConverterTypeAdvancedGetResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdvancedGetResult_lower(_ value: AdvancedGetResult) -> RustBuffer {
    return FfiConverterTypeAdvancedGetResult.lower(value)
}


public struct CollectionInfo {
    public var name: String
    public var collectionId: String
    public var numDocuments: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, collectionId: String, numDocuments: UInt32) {
        self.name = name
        self.collectionId = collectionId
        self.numDocuments = numDocuments
    }
}

#if compiler(>=6)
extension CollectionInfo: Sendable {}
#endif


extension CollectionInfo: Equatable, Hashable {
    public static func ==(lhs: CollectionInfo, rhs: CollectionInfo) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.collectionId != rhs.collectionId {
            return false
        }
        if lhs.numDocuments != rhs.numDocuments {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(collectionId)
        hasher.combine(numDocuments)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCollectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CollectionInfo {
        return
            try CollectionInfo(
                name: FfiConverterString.read(from: &buf),
                collectionId: FfiConverterString.read(from: &buf),
                numDocuments: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: CollectionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.collectionId, into: &buf)
        FfiConverterUInt32.write(value.numDocuments, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCollectionInfo_lift(_ buf: RustBuffer) throws -> CollectionInfo {
    return try FfiConverterTypeCollectionInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCollectionInfo_lower(_ value: CollectionInfo) -> RustBuffer {
    return FfiConverterTypeCollectionInfo.lower(value)
}


public struct DatabaseInfo {
    public var id: String
    public var name: String
    public var tenant: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, tenant: String) {
        self.id = id
        self.name = name
        self.tenant = tenant
    }
}

#if compiler(>=6)
extension DatabaseInfo: Sendable {}
#endif


extension DatabaseInfo: Equatable, Hashable {
    public static func ==(lhs: DatabaseInfo, rhs: DatabaseInfo) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.tenant != rhs.tenant {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(tenant)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDatabaseInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DatabaseInfo {
        return
            try DatabaseInfo(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterString.read(from: &buf),
                tenant: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DatabaseInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.tenant, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabaseInfo_lift(_ buf: RustBuffer) throws -> DatabaseInfo {
    return try FfiConverterTypeDatabaseInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabaseInfo_lower(_ value: DatabaseInfo) -> RustBuffer {
    return FfiConverterTypeDatabaseInfo.lower(value)
}


public struct GetResult {
    public var ids: [String]
    public var documents: [String?]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ids: [String], documents: [String?]) {
        self.ids = ids
        self.documents = documents
    }
}

#if compiler(>=6)
extension GetResult: Sendable {}
#endif


extension GetResult: Equatable, Hashable {
    public static func ==(lhs: GetResult, rhs: GetResult) -> Bool {
        if lhs.ids != rhs.ids {
            return false
        }
        if lhs.documents != rhs.documents {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ids)
        hasher.combine(documents)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetResult {
        return
            try GetResult(
                ids: FfiConverterSequenceString.read(from: &buf),
                documents: FfiConverterSequenceOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: GetResult, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.ids, into: &buf)
        FfiConverterSequenceOptionString.write(value.documents, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetResult_lift(_ buf: RustBuffer) throws -> GetResult {
    return try FfiConverterTypeGetResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetResult_lower(_ value: GetResult) -> RustBuffer {
    return FfiConverterTypeGetResult.lower(value)
}


public struct QueryResult {
    public var ids: [[String]]
    public var documents: [[String?]]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ids: [[String]], documents: [[String?]]) {
        self.ids = ids
        self.documents = documents
    }
}

#if compiler(>=6)
extension QueryResult: Sendable {}
#endif


extension QueryResult: Equatable, Hashable {
    public static func ==(lhs: QueryResult, rhs: QueryResult) -> Bool {
        if lhs.ids != rhs.ids {
            return false
        }
        if lhs.documents != rhs.documents {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ids)
        hasher.combine(documents)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQueryResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QueryResult {
        return
            try QueryResult(
                ids: FfiConverterSequenceSequenceString.read(from: &buf),
                documents: FfiConverterSequenceSequenceOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: QueryResult, into buf: inout [UInt8]) {
        FfiConverterSequenceSequenceString.write(value.ids, into: &buf)
        FfiConverterSequenceSequenceOptionString.write(value.documents, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQueryResult_lift(_ buf: RustBuffer) throws -> QueryResult {
    return try FfiConverterTypeQueryResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQueryResult_lower(_ value: QueryResult) -> RustBuffer {
    return FfiConverterTypeQueryResult.lower(value)
}


public enum ChromaError: Swift.Error {

    
    
    case Generic(message: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChromaError: FfiConverterRustBuffer {
    typealias SwiftType = ChromaError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChromaError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ChromaError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChromaError_lift(_ buf: RustBuffer) throws -> ChromaError {
    return try FfiConverterTypeChromaError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChromaError_lower(_ value: ChromaError) -> RustBuffer {
    return FfiConverterTypeChromaError.lower(value)
}


extension ChromaError: Equatable, Hashable {}




extension ChromaError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceOptionString: FfiConverterRustBuffer {
    typealias SwiftType = [String?]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceOptionString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceOptionString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [[Float]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceSequenceFloat.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceSequenceFloat.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [Float]

    public static func write(_ value: [Float], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterFloat.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Float] {
        let len: Int32 = try readInt(&buf)
        var seq = [Float]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterFloat.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceOptionString: FfiConverterRustBuffer {
    typealias SwiftType = [String?]

    public static func write(_ value: [String?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterOptionString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String?] {
        let len: Int32 = try readInt(&buf)
        var seq = [String?]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterOptionString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [[Float]]

    public static func write(_ value: [[Float]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceFloat.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[Float]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[Float]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceFloat.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceOptionString: FfiConverterRustBuffer {
    typealias SwiftType = [[String?]]

    public static func write(_ value: [[String?]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceOptionString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String?]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String?]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceOptionString.read(from: &buf))
        }
        return seq
    }
}
public func addDocuments(collectionName: String, ids: [String], embeddings: [[Float]], documents: [String])throws  -> UInt32  {
    return try  FfiConverterUInt32.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_add_documents(
        FfiConverterString.lower(collectionName),
        FfiConverterSequenceString.lower(ids),
        FfiConverterSequenceSequenceFloat.lower(embeddings),
        FfiConverterSequenceString.lower(documents),$0
    )
})
}
public func countCollections()throws  -> UInt32  {
    return try  FfiConverterUInt32.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_count_collections($0
    )
})
}
public func countDocuments(collectionName: String)throws  -> UInt32  {
    return try  FfiConverterUInt32.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_count_documents(
        FfiConverterString.lower(collectionName),$0
    )
})
}
public func createCollection(name: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_create_collection(
        FfiConverterString.lower(name),$0
    )
})
}
public func createDatabase(name: String)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_create_database(
        FfiConverterString.lower(name),$0
    )
})
}
public func deleteCollection(collectionName: String)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_delete_collection(
        FfiConverterString.lower(collectionName),$0
    )
}
}
public func deleteDatabase(name: String)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_delete_database(
        FfiConverterString.lower(name),$0
    )
}
}
public func deleteDocuments(collectionName: String, ids: [String]?)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_delete_documents(
        FfiConverterString.lower(collectionName),
        FfiConverterOptionSequenceString.lower(ids),$0
    )
}
}
public func getAllDocuments(collectionName: String)throws  -> GetResult  {
    return try  FfiConverterTypeGetResult_lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_all_documents(
        FfiConverterString.lower(collectionName),$0
    )
})
}
public func getCollection(collectionName: String)throws  -> CollectionInfo  {
    return try  FfiConverterTypeCollectionInfo_lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_collection(
        FfiConverterString.lower(collectionName),$0
    )
})
}
public func getDatabase(name: String)throws  -> DatabaseInfo  {
    return try  FfiConverterTypeDatabaseInfo_lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_database(
        FfiConverterString.lower(name),$0
    )
})
}
public func getDocuments(collectionName: String, ids: [String]?, whereClause: String?, limit: UInt32?, offset: UInt32?, whereDocument: String?, include: [String]?)throws  -> AdvancedGetResult  {
    return try  FfiConverterTypeAdvancedGetResult_lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_documents(
        FfiConverterString.lower(collectionName),
        FfiConverterOptionSequenceString.lower(ids),
        FfiConverterOptionString.lower(whereClause),
        FfiConverterOptionUInt32.lower(limit),
        FfiConverterOptionUInt32.lower(offset),
        FfiConverterOptionString.lower(whereDocument),
        FfiConverterOptionSequenceString.lower(include),$0
    )
})
}
public func getMaxBatchSize()throws  -> UInt32  {
    return try  FfiConverterUInt32.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_max_batch_size($0
    )
})
}
public func getVersion()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_get_version($0
    )
})
}
public func heartbeat()throws  -> Int64  {
    return try  FfiConverterInt64.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_heartbeat($0
    )
})
}
public func initialize(allowReset: Bool)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_initialize(
        FfiConverterBool.lower(allowReset),$0
    )
}
}
public func initializeWithPath(path: String?, allowReset: Bool)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_initialize_with_path(
        FfiConverterOptionString.lower(path),
        FfiConverterBool.lower(allowReset),$0
    )
}
}
public func listCollections()throws  -> [String]  {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_list_collections($0
    )
})
}
public func listDatabases()throws  -> [String]  {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_list_databases($0
    )
})
}
public func queryCollection(collectionName: String, queryEmbeddings: [[Float]], nResults: UInt32, whereFilter: String?, ids: [String]?, include: [String]?)throws  -> QueryResult  {
    return try  FfiConverterTypeQueryResult_lift(try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_query_collection(
        FfiConverterString.lower(collectionName),
        FfiConverterSequenceSequenceFloat.lower(queryEmbeddings),
        FfiConverterUInt32.lower(nResults),
        FfiConverterOptionString.lower(whereFilter),
        FfiConverterOptionSequenceString.lower(ids),
        FfiConverterOptionSequenceString.lower(include),$0
    )
})
}
public func reset()throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_reset($0
    )
}
}
public func updateCollection(collectionName: String, newName: String?)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_update_collection(
        FfiConverterString.lower(collectionName),
        FfiConverterOptionString.lower(newName),$0
    )
}
}
public func updateDocuments(collectionName: String, ids: [String], embeddings: [[Float]]?, documents: [String]?)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_update_documents(
        FfiConverterString.lower(collectionName),
        FfiConverterSequenceString.lower(ids),
        FfiConverterOptionSequenceSequenceFloat.lower(embeddings),
        FfiConverterOptionSequenceString.lower(documents),$0
    )
}
}
public func upsertDocuments(collectionName: String, ids: [String], embeddings: [[Float]]?, documents: [String]?)throws   {try rustCallWithError(FfiConverterTypeChromaError_lift) {
    uniffi_chroma_swift_fn_func_upsert_documents(
        FfiConverterString.lower(collectionName),
        FfiConverterSequenceString.lower(ids),
        FfiConverterOptionSequenceSequenceFloat.lower(embeddings),
        FfiConverterOptionSequenceString.lower(documents),$0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_chroma_swift_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_chroma_swift_checksum_func_add_documents() != 15974) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_count_collections() != 52564) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_count_documents() != 3577) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_create_collection() != 48904) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_create_database() != 30743) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_delete_collection() != 4723) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_delete_database() != 51167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_delete_documents() != 15708) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_all_documents() != 47309) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_collection() != 23824) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_database() != 37433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_documents() != 33633) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_max_batch_size() != 23638) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_get_version() != 17164) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_heartbeat() != 21627) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_initialize() != 49705) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_initialize_with_path() != 46424) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_list_collections() != 37367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_list_databases() != 21183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_query_collection() != 29814) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_reset() != 54956) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_update_collection() != 966) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_update_documents() != 57744) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chroma_swift_checksum_func_upsert_documents() != 58048) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureChromaSwiftInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
